#include <wrong/mistake>

using namespace wrong;
using namespace wrong::action;

int
main ()
{
	mistake my;

	my.dependency("foo")
		.place(place::git()
			.remote("https://github.com/meh/wrong")
			.root("example/foo"))
		.provides<program>("foo",
			((sources({ "source/*.cpp" })
				>> compile().include("include").define("BLA_BLA"))
			+(sources({ "source/bla/*.c" })
				>> compile().include("include/bla")))
			>> executable().use("bar::bar").link("m"));

	my.dependency("bar")
		.place(place::local()
			.path("example/bar"))
		.provides<library>("bar",
			   sources({ "source/*.cpp" })
			>> compile().include("include/bar")
			>> archive());

//	my.program("bar")
//		// NOTE(meh): This adds a `prepare<provision>` to a list of required
//		//            provisions, which will then be built, it's essentially
//		//            a future.
//		.requires<program>("foo::foo");
//
//	return my.build("foo");
}
