#pragma once

#include <unordered_map>
#include <string>

#include <wrong/dependency>

namespace wrong {

class mistake
{
public:
	mistake ()
	{ }

	class dependency&
	dependency (std::string name)
	{
		if (auto it = _dependencies.find(name); it != _dependencies.end()) {
			return it->second;
		}

		_dependencies.insert({name, name});
		return _dependencies.at(name);
	}

	int
	build (void)
	{
		for (auto& [_, dependency] : _dependencies) {
			if (auto result = dependency.build(); result != 0) {
				return result;
			}
		}

		return 0;
	}

private:
	std::unordered_map<std::string, wrong::dependency> _dependencies;
};

}
