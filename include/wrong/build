#pragma once

#include <unordered_map>
#include <string>
#include <memory>

#include <wrong/dependency/all>

#include <wrong/program>
#include <wrong/library>

namespace wrong {

class build
{
public:
	build ()
	{ }

	template <typename Type>
	Type&
	dependency (std::string name)
	{
		if (auto it = _dependencies.find(name); it != _dependencies.end()) {
			return reinterpret_cast<Type&>(it->second);
		}

		auto defined = std::make_unique<Type>(name);
		_dependencies.insert({ name, std::move(defined) });
		return dynamic_cast<Type&>(*_dependencies.at(name));
	}

	class program
	program (std::string name)
	{
		return {};
	}

	class library
	library (std::string name)
	{
		return {};
	}

private:
	std::unordered_map<std::string, std::unique_ptr<dependency::base>> _dependencies;
};

}
