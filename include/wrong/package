#pragma once

#include <string>

#include <wrong/util>
#include <wrong/flags>

namespace wrong {

class package final
{
public:
	/*! Define the package name.
	 */
	package&
	name (std::string value)
	{
		_name = value;
		return *this;
	}

	/*! Define the dependency as static.
	 */
	package&
	statically (bool value)
	{
		_static = value;
		return *this;
	}

	/*! Specify a minimum version for the package.
	 */
	package&
	at_least_version (std::string value)
	{
		_version = value;
		return *this;
	}

	/*! Apply the pkg-config settings to the given `flags`.
	 */
	int
	apply (flags& flags) const
	{
		auto common = [this](auto& cmd) -> auto& {
			cmd << "pkg-config \"" << _name << "\"";

			if (_static) {
				cmd << " --static";
			}

			if (_version) {
				cmd << " --atleast-version " << _version.value();
			}

			return cmd;
		};

		auto ldflags = util::shell([=](auto& cmd) {
			common(cmd) << " --libs";
		});

		if (ldflags.status != 0) {
			return ldflags.status;
		}

		auto cflags = util::shell([=](auto& cmd) {
			common(cmd) << " --cflags";
		});

		if (cflags.status != 0) {
			return cflags.status;
		}

		util::trim(ldflags.stdout);
		util::trim(cflags.stdout);

		flags.c().push_back(cflags.stdout);
		flags.cxx().push_back(cflags.stdout);
		flags.ld().push_back(ldflags.stdout);

		return 0;
	}

private:
	std::string _name;
	bool _static = false;
	std::optional<std::string> _version;
};

}
