/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <iostream>
#include <optional>

#include <streambuf>
#include <istream>
#include <cstdio>
#include <cstdlib>
#include <array>
#include <tuple>
#include <vector>
#include <future>
#include <spdlog/spdlog.h>

/*! Wrapper for a C stdio stream to a C++ stream.
 */
class stdiostream : public std::streambuf
{
public:
	stdiostream (int (*close)(FILE*) = std::fclose)
		: _close(close)
	{ }

	stdiostream (FILE* ptr, int (*close)(FILE*) = std::fclose)
		: _ptr(ptr), _close(close)
	{ }

	~stdiostream ()
	{
		if (_ptr != nullptr) {
			_close(_ptr);
		}
	}

	/*! Get the stream being wrapped.
	 */
	FILE*
	file ()
	{
		return _ptr;
	}

	/*! Set the stream being wrapped.
	 */
	void
	file (FILE* ptr)
	{
		_ptr = ptr;
	}

protected:
	int
	underflow()
	{
		if (gptr() == egptr()) {
			size_t size = std::fread(_buffer.data(), 1, _buffer.size(), _ptr);
			setg(_buffer.data(), _buffer.data(), _buffer.data() + size);
		}

		return gptr() == egptr()
			? std::char_traits<char>::eof()
			: std::char_traits<char>::to_int_type(*gptr());
	}

private:
	std::array<char, 1024> _buffer;
	FILE* _ptr;
	int (*_close)(FILE*);
};

class stdiostream_base
{
public:
	stdiostream_base(int (*close)(FILE*))
		: _stream(close)
	{}

	stdiostream_base(FILE* ptr, int (*close)(FILE*))
		: _stream(ptr, close)
	{}

public:
	FILE*
	file ()
	{
		return _stream.file();
	}

	void
	file (FILE* ptr)
	{
		_stream.file(ptr);
	}

protected:
	stdiostream _stream;
};

class istdiostream
	: public virtual stdiostream_base
	, public std::istream
{
public:
	istdiostream(int (*close)(FILE*))
		: stdiostream_base(close)
		, std::ios(&this->_stream)
		, std::istream(&this->_stream)
	{ }

	istdiostream(FILE* ptr, int (*close)(FILE*))
		: stdiostream_base(ptr, close)
		, std::ios(&this->_stream)
		, std::istream(&this->_stream)
	{ }
};
