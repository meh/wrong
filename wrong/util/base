/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <optional>
#include <tuple>
#include <vector>

namespace wrong {

template <bool...>
struct bool_pack;

/*! Check whether all values are true in the pack.
 */
template <bool... Bools>
using is_all_true = std::is_same<bool_pack<Bools..., true>, bool_pack<true, Bools...>>;

template <bool... Bools>
inline constexpr bool is_all_true_v = is_all_true<Bools...>::value;

/*! Get the nth type in a tuple.
 */
template <size_t N, typename... Ts>
using nth = typename std::tuple_element<N, std::tuple<Ts...>>::type;

template <typename Type>
struct union_of;

template <typename T>
struct union_of<std::vector<T>>
{
	template <typename... Args>
	std::vector<T>
	operator() (Args... args)
	{
		std::vector<T> output;
		(output.insert(output.end(),
			std::make_move_iterator(args.begin()),
			std::make_move_iterator(args.end())), ...);

		return output;
	}
};

/*! Take the value out of an optional or raise a runtime error with a message.
 */
template <typename T>
T
expect (std::optional<T> value, std::string message)
{
	if (!value.has_value()) {
		throw std::runtime_error(message);
	}

	return value.value();
}

}
