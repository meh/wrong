/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <future>
#include <optional>
#include <functional>
#include <variant>
#include <vector>
#include <string>
#include <filesystem>

#include <wrong/util>

using namespace std::string_literals;

namespace wrong {

/*! An assets is a file that has no behavior of its own.
 *
 * It could be an image, a video, or even source code that needs to be
 * generated through some pre-processor.
 */
class asset
{
public:
	asset () = delete;

	asset (std::filesystem::path path)
		: _path(path)
	{ }

	/*! Path to the provided asset.
	 */
	std::filesystem::path&
	path ()
	{
		return _path;
	}

private:
	std::filesystem::path _path;
};

/*! A library is either shared, static or header only.
 */
class library
{
public:
	library () = delete;

	library (bool is_static, std::optional<std::filesystem::path> path, std::vector<std::filesystem::path> headers)
		: _is_static(is_static), _path(path), _headers(headers)
	{ }

	/*! Whether the library is static or shared.
	 *
	 * ## Notes
	 *
	 * A header only library is considered static.
	 */
	bool
	is_static () const
	{
		return _is_static;
	}

	/*! The path to the library.
	 *
	 * ## Notes
	 *
	 * If there is no path then it's a header only library.
	 */
	std::optional<std::filesystem::path> const&
	path () const
	{
		return _path;
	}

	/*! A list of headers provided by this library.
	 */
	std::vector<std::filesystem::path> const&
	headers () const
	{
		return _headers;
	}

private:
	bool _is_static;
	std::optional<std::filesystem::path> _path;
	std::vector<std::filesystem::path> _headers;
};

/*! A program is an executable that can be ran.
 *
 * For example a tool that can be used to generate more stuff.
 */
class program
{
public:
	/*! Process instance of the program.
	 */
	class process : public std::streambuf
	{
	public:
		process () = delete;

		process (std::string cmd)
			: _pipe(pclose)
		{
			spdlog::debug("{}", cmd);

			if (auto pipe = popen(cmd.c_str(), "r"); pipe != nullptr) {
				_pipe.file(pipe);
			}
			else {
				throw std::runtime_error("popen() failed!");
			}
		}

		/*! Check the status for the process.
		 *
		 * ## Note
		 *
		 * This blocks until the process has exited, or returns instantly if the
		 * process has already exited.
		 */
		int
		status ()
		{
			if (_pipe.file() != nullptr) {
				auto status = pclose(_pipe.file());
				_status = WEXITSTATUS(status);
				_pipe.file(nullptr);
			}

			return _status;
		}

		/*! The standard output of the process as a stream.
		 */
		istdiostream&
		stdout ()
		{
			return _pipe;
		}

	private:
		int _status;
		istdiostream _pipe;
	};

	/*! Look for a program available in the system.
	 */
	static inline
	std::optional<program>
	which (std::string_view name)
	{
		auto path = std::getenv("PATH");

		if (path == nullptr) {
			return {};
		}

		std::istringstream input(path);
		std::string prefix;

		while (std::getline(input, prefix, ':')) {
			std::filesystem::path executable(prefix);
			executable /= name;

			if (std::filesystem::is_regular_file(executable)) {
				return executable;
			}
		}

		return {};
	}

public:
	program () = delete;

	program (std::filesystem::path path)
		: _path(path)
	{ }

	/*! Path to the program.
	 */
	std::filesystem::path const&
	path () const
	{
		return _path;
	}

	/*! Run the program with the given arguments.
	 */
	process
	run (std::vector<std::string> args = {}) const
	{
		std::ostringstream cmd(_path, std::ios_base::ate);

		for (auto arg : args) {
			cmd << " " << arg;
		}

		return cmd.str();
	}

private:
	std::filesystem::path _path;
};

}
