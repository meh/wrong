/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <fnmatch.h>
#include <vector>
#include <filesystem>
#include <functional>
#include <regex>
#include <set>

#include <wrong/util>

namespace wrong {

template <typename Tag>
class file_set
{
public:
	using iterator = std::set<std::filesystem::path>::const_iterator;
	using const_iterator = std::set<std::filesystem::path>::const_iterator;

public:
	template <typename Input>
	file_set (Input input)
	{
		using std::begin;
		using std::end;

		_set.insert(begin(input), end(input));
	}

	file_set<Tag>&
	operator|= (file_set<Tag> const& rhs)
	{
		using std::begin;
		using std::end;

		_set.insert(begin(rhs), end(rhs));
		return *this;
	}

	friend file_set<Tag>
	operator| (file_set<Tag> lhs, file_set<Tag> const& rhs)
	{
		lhs |= rhs;
		return lhs;
	}

	iterator
	begin ()
	{
		using std::begin;

		return begin(_set);
	}

	iterator
	end ()
	{
		using std::end;

		return end(_set);
	}

private:
	std::set<std::filesystem::path> _set;
};

class file_list
{
public:
	using directory_iterator = std::filesystem::recursive_directory_iterator;

	class matcher
	{
	public:
		using predicate = std::function<bool(std::filesystem::path&)>;

	public:
		matcher (std::string pred)
			: _predicate([pred](auto& path) {
				// TODO(meh): Implement this in C++
				return fnmatch(pred.c_str(), path.c_str(), FNM_PATHNAME | FNM_PERIOD) == 0;
			})
		{ }

		matcher (predicate pred)
			: _predicate(pred)
		{ }

		bool
		matches (std::filesystem::path path) const
		{
			return _predicate(path);
		}

	private:
		predicate _predicate;
	};

	class iterator
	{
	public:
		using value_type = directory_iterator::value_type;
		using difference_type = directory_iterator::difference_type;
		using pointer = directory_iterator::pointer;
		using reference = directory_iterator::reference;
		using iterator_category = directory_iterator::iterator_category;

	public:
		iterator (std::filesystem::path root, std::vector<matcher> const& include, std::vector<matcher> const& exclude)
			: iterator(root, include, exclude, directory_iterator(
					root, std::filesystem::directory_options::skip_permission_denied))
		{ }

		iterator (std::filesystem::path root, std::vector<matcher> const& include, std::vector<matcher> const& exclude, directory_iterator iter)
			: _root(root), _include(include), _exclude(exclude), _inner(iter)
		{
			find_matching();
		}

		bool
		matches (std::filesystem::path path)
		{
			// By default all files in a file list are ignored.
			bool matches = false;

			// First check if the path is included by anything, at the first valid
			// inclusion, mark it as matching and bail out.
			for (auto& include : _include) {
				if (include.matches(path)) {
					matches = true;
					break;
				}
			}

			// Then if anything was included go through exclusions until one excludes
			// the path.
			if (matches) {
				for (auto& exclude : _exclude) {
					if (exclude.matches(path)) {
						matches = false;
						break;
					}
				}
			}

			return matches;
		}

		void
		find_matching ()
		{
			while (_inner != std::filesystem::end(_inner) && !matches(_inner->path().lexically_relative(_root))) {
				++_inner;
			}
		}

		iterator
		begin ()
		{
			return { _root, _include, _exclude, std::filesystem::begin(_inner) };
		}

		iterator
		end ()
		{
			return { _root, _include, _exclude, std::filesystem::end(_inner) };
		}

		value_type
		operator * () const
		{
			return *_inner;
		}

		bool
		operator == (iterator const& other) const
		{
			return _inner == other._inner;
		}

		bool
		operator != (iterator const& other) const
		{
			return !(*this == other);
		}

		value_type
		operator++ (int)
		{
			++_inner;
			find_matching();
			return *_inner;
		}

		iterator&
		operator++ ()
		{
			++_inner;
			find_matching();
			return *this;
		}

	private:
		std::filesystem::path       _root;
		std::vector<matcher> const& _include;
		std::vector<matcher> const& _exclude;

		directory_iterator _inner;
	};

public:
	file_list ()
	{ }

	template <typename Matcher>
	file_list (std::vector<Matcher> args)
	{
		include(args);
	}

	template <typename Matcher>
	file_list (std::initializer_list<Matcher> args)
	{
		include(args);
	}

public:
	template <typename Matcher>
	file_list&
	include (std::vector<Matcher> args)
	{
		for (auto arg : args) {
			_include.push_back(matcher(arg));
		}

		return *this;
	}

	template <typename Matcher>
	file_list&
	include (std::initializer_list<Matcher> args)
	{
		for (auto arg : args) {
			_include.push_back(matcher(arg));
		}

		return *this;
	}

	template <typename Matcher>
	file_list&
	exclude (std::vector<Matcher> args)
	{
		for (auto arg : args) {
			_exclude.push_back(matcher(arg));
		}

		return *this;
	}

	template <typename Matcher>
	file_list&
	exclude (std::initializer_list<Matcher> args)
	{
		for (auto arg : args) {
			_exclude.push_back(matcher(arg));
		}

		return *this;
	}

	iterator
	filter (std::filesystem::path path)
	{
		return { path, _include, _exclude };
	}

	template <typename Matcher>
	file_list&
	operator<< (Matcher matcher)
	{
		return include({ matcher });
	}

	file_list&
	operator|= (file_list const& rhs)
	{
		_include.insert(_include.end(), rhs._include.begin(), rhs._include.end());
		_exclude.insert(_exclude.end(), rhs._exclude.begin(), rhs._exclude.end());
		return *this;
	}

	friend file_list
	operator| (file_list lhs, file_list const& rhs)
	{
		lhs |= rhs;
		return lhs;
	}

	template <typename Matcher>
	file_list&
	operator+= (std::initializer_list<Matcher> matcher)
	{
		include(matcher);
		return *this;
	}

	template <typename Matcher>
	friend file_list
	operator+ (file_list lhs, std::initializer_list<Matcher> matcher)
	{
		lhs += matcher;
		return lhs;
	}

	template <typename Matcher>
	file_list&
	operator-= (std::initializer_list<Matcher> matcher)
	{
		include(matcher);
		return *this;
	}

	template <typename Matcher>
	friend file_list
	operator- (file_list lhs, std::initializer_list<Matcher> matcher)
	{
		lhs -= matcher;
		return lhs;
	}

private:
	std::vector<matcher> _include;
	std::vector<matcher> _exclude;
};

template <>
struct union_of<file_list>
{
	template <typename... Args>
	file_list
	operator() (Args... args)
	{
		return (args | ...);
	}
};

template <typename Tag>
struct union_of<file_set<Tag>>
{
	template <typename... Args>
	file_set<Tag>
	operator() (Args... args)
	{
		return (args | ...);
	}
};

}
