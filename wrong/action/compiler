/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <string>
#include <vector>
#include <optional>
#include <filesystem>
#include <stdexcept>

#include <wrong/provision>
#include <wrong/util>
#include <wrong/file_list>

namespace wrong { namespace action { namespace compiler {

namespace language
{
	/*! The language type.
	 */
	enum class type
	{
		c,
		cxx,
	};

	/*! The specification to pick a language for the compiler.
	 */
	struct specification
	{
		/*! The language type.
		 */
		enum type language;

		/*! The language standard, or the default.
		 */
		std::optional<std::string> standard;
	};

	specification
	c ()
	{
		return { .language = type::c, .standard = {} };
	}

	specification
	c (int version)
	{
		return { .language = type::c, .standard = fmt::format("c{}", version) };
	}

	specification
	c (std::string version)
	{
		return { .language = type::c, .standard = fmt::format("{}", version) };
	}

	specification
	cxx ()
	{
		return { .language = type::c, .standard = {} };
	}

	specification
	cxx (int version)
	{
		return { .language = type::c, .standard = fmt::format("c++{}", version) };
	}

	specification
	cxx (std::string version)
	{
		return { .language = type::c, .standard = fmt::format("{}", version) };
	}
}

class base
{
public:
	virtual ~base()
	{ }

	/*! Compile the `input` into `output`.
	 */
	virtual program::process compile (std::filesystem::path input, std::filesystem::path output) = 0;

	/*! Set what language to use.
	 */
	virtual void language (language::specification spec) = 0;

	/*! Specify the target to compile for.
	 */
	virtual void target (std::string triple) = 0;

	/*! Add a path to the include paths.
	 */
	virtual void include (std::future<file_set<void>> list) = 0;

	/*! Add a definition.
	 */
	virtual void define (std::string name, std::string value) = 0;

	/*! Enable a definition.
	 */
	virtual void define (std::string name) = 0;

	/*! Set a custom flag.
	 */
	virtual void flag (std::string name, std::string value) = 0;

	/*! Set a custom flag.
	 */
	virtual void flag (std::string name) = 0;
};

class gcc : public base
{
public:
	program::process
	compile (std::filesystem::path input, std::filesystem::path output) override
	{
		// Create the binary name for GCC based on the language specification and
		// target name.
		std::string compiler;
		{
			if (_target) {
				compiler += _target.value() + "-";
			}

			if (_language.language == language::type::c) {
				compiler += "gcc";
			}
			else if (_language.language == language::type::cxx) {
				compiler += "g++";
			}
		}

		// As arguments to the compiler first pass the user defined flags, then the
		// language standard, then the output, and finally the input.
		std::vector<std::string> args;
		{
			args.insert(args.end(), _flags.begin(), _flags.end());

			for (auto dir : _include) {
				args.push_back(fmt::format("-I{}", program::quote(dir.string())));
			}

			if (_language.standard) {
				args.push_back("-std=" + _language.standard.value());
			}

			auto dependency = output;
			dependency.replace_extension(".d");

			args.insert(args.end(),
				{ "-MMD", "-MP", "-MF", dependency, "-o", output, "-c", input });
		}

		// Create a provision for the compiler and run it.
		if (auto bin = program::which(compiler); bin) {
			return bin.value().run(args);
		}

		throw std::runtime_error(fmt::format("compiler not found: {}", compiler));
	}

	void
	language (language::specification spec) override
	{
		_language = spec;
	}

	void
	target (std::string triple) override
	{
		_target = triple;
	}

	void
	include (std::future<file_set<void>> list) override
	{
		_include |= list.get();
	}

	void
	define (std::string name, std::string value) override
	{
		_flags.push_back(fmt::format("-D{}={}", name, program::quote(value)));
	}

	void
	define (std::string name) override
	{
		_flags.push_back(fmt::format("-D{}=1", name));
	}

	void
	flag (std::string name, std::string value) override
	{
		_flags.push_back(fmt::format("-{}={}", name, program::quote(value)));
	}

	void
	flag (std::string name) override
	{
		_flags.push_back(fmt::format("-{}", name));
	}

private:
	language::specification    _language;
	std::optional<std::string> _target;
	std::vector<std::string>   _flags;
	file_set<void>             _include;
};

} } }
