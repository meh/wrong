/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <functional>
#include <numeric>
#include <memory>
#include <future>

namespace wrong { namespace action {

/*! An action is essentially a function.
 */
template <typename In, typename Out>
struct action
{
	/*! The input type for the action.
	 */
	using in = In;

	/*! The output type of the action.
	 */
	using out = Out;
};

template <typename In, typename Out>
struct scope
{
	virtual
	In
	before (In in)
	{
		return in;
	}

	virtual
	Out
	after (Out out)
	{
		return out;
	}

	virtual ~scope() { };
};

/*! Check whether a type is a valid action or not.
 */
template <typename Self, typename = void>
struct is_action : std::false_type
{ };

template <typename Self>
struct is_action<Self, std::enable_if_t<
	std::is_base_of<action<typename Self::in, typename Self::out>, Self>::value>>
: std::true_type
{ };

template <typename Self>
inline constexpr bool is_action_v = is_action<Self>::value;

/*! Traits every action must define.
 */
template <typename Self, typename = void>
struct traits
{ };

template <typename Self>
struct traits<Self, std::enable_if_t<is_action_v<Self>>>
{
	/*! The input type.
	 */
	using in = typename Self::in;

	/*! The output type.
	 */
	using out = typename Self::out;
};

template <typename Self>
using in_t = typename traits<Self>::in;

template <typename Self>
using out_t = typename traits<Self>::out;

/*! A scope is an action that can also map input and output (or do stuff).
 *
 * This is spooky, a scope is actually just three actions combined, but the
 * first and third share state.
 */
template <typename Scope, typename Action>
class scoped : public virtual action<in_t<Action>, out_t<Action>>
{
public:
	scoped (Scope scope, Action action)
		: _scope(scope), _action(action)
	{ }

public:
	out_t<Action>
	operator() (in_t<Action> in)
	{
		return _scope.after(std::invoke(_action, _scope.before(in)));
	}

private:
	Scope  _scope;
	Action _action;
};

/*! Nothing of value.
 */
struct nothing
{
	nothing ()
	{ }

	template <typename In>
	nothing (In _input)
	{ }
};

/*! Turn a value into an action.
 */
template <typename Value>
class unit : public virtual action<nothing, Value>
{
public:
	unit (Value value)
		: _value(value)
	{ }

	Value
	operator~ ()
	{
		return _value;
	}

	Value
	operator() (nothing _)
	{
		return _value;
	}

protected:
	Value _value;
};

/*! Turn a Callable into an action.
 */
template <typename In, typename Out, typename Callable, typename = std::enable_if_t<
	std::is_invocable_v<Callable, Out, In>>>
class callable : public virtual action<In, Out>
{
public:
	callable (Callable fun)
		: _fun(fun)
	{ }

	Out
	operator() (In input)
	{
		return _fun(input);
	}

private:
	Callable _fun;
};

template <typename Condition, typename Then, typename Otherwise>
class conditional : public virtual action<in_t<Then>, out_t<Then>>
{
	static_assert(std::is_same_v<in_t<Then>, in_t<Otherwise>>,
		"input types do not match");

	static_assert(std::is_same_v<out_t<Then>, out_t<Otherwise>>,
		"output types do not match");

public:
	conditional (Condition condition, Then then, Otherwise otherwise)
		: _condition(condition), _then(then), _otherwise(otherwise)
	{ }

	out_t<Then>
	operator() (in_t<Then> input)
	{
		if (_condition(nothing{})) {
			return _then(input);
		}
		else {
			return _otherwise(input);
		}
	}

private:
	Condition _condition;
	Then      _then;
	Otherwise _otherwise;
};

namespace detail {
	/*! Turn a value into a future.
 	 */
	template <typename T, typename = void>
	struct into_future
	{
		static inline
		std::future<T>
		convert (T value)
		{
			std::promise<T> v;
			v.set_value(v);
			return v.get_future();
		}
	};

	template <typename T>
	struct into_future<std::future<T>>
	{
		static inline
		std::future<T>
		convert (std::future<T> value)
		{
			return value;
		}
	};

	template <typename T>
	struct into_future<T, std::enable_if_t<std::is_member_function_pointer_v<decltype(&T::get_future)>>>
	{
		static inline
		std::invoke_result_t<decltype(&T::get_future)>
		convert (T value)
		{
			return value.get_future();
		}
	};

	template <typename Action>
	struct into_future<Action, std::enable_if_t<is_action_v<Action> && std::is_same_v<in_t<Action>, nothing>>>
	{
		static inline
		std::future<out_t<Action>>
		convert (Action act)
		{
			return std::async(std::launch::async, act, nothing{});
		}
	};
}

template <typename Action>
auto
into_future (Action act)
{
	return detail::into_future<Action>::convert(act);
}

/*! Turn a value into an action.
 */
template <typename Value>
unit<Value>
value (Value value)
{
	return value;
}

/*! Create an action out of any function.
 */
template <typename Callable>
auto
then (Callable fun)
{
	return callable{ fun };
}

template <typename Condition, typename Then, typename Otherwise>
conditional<Condition, Then, Otherwise>
when (Condition condition, Then then, Otherwise otherwise)
{
	return { condition, then, otherwise };
}

} }
