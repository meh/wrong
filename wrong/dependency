/** Copyleft (É”) meh. - http://meh.schizofreni.co
 *
 * This file is part of wrong - https://github.com/meh/wrong
 *
 * wrong is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * wrong is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <future>
#include <string>
#include <memory>
#include <unordered_map>
#include <filesystem>

#include <wrong/place>
#include <wrong/provision>
#include <wrong/action/action>

namespace wrong {

/*! A dependency which provides provisions.
 */
class dependency
{
public:
	/*! A provision that can be built.
	 */
	class provision
	{
	public:
		using type = std::variant<asset, library, program>;

	public:
		template <typename Action>
		provision (std::string name, Action action)
			: _name(name)
		{
			struct variant : public virtual action::action<action::out_t<Action>, type>
			{
				type
				operator() (action::out_t<Action> output)
				{
					return output;
				}
			};

			_action = action >> variant();
		}

		/*! Get the name of the provision.
		 */
		std::string_view
		name () const
		{
			return _name;
		}

		/*! Get a future that will resolve to the built provision.
		 */
		std::future<type>
		get_future ()
		{
			return std::async(std::launch::async, [this]() {
				return std::invoke(_action, action::nothing());
			});
		}

		type
		build ()
		{
			return std::invoke(_action, action::nothing());
		}

	private:
		/*! The name being provided.
		 */
		std::string _name;

		/*! The action to build the provision.
		 */
		std::function<type(action::nothing)> _action;
	};

public:
	dependency (std::string name)
		: _name(name), _place(std::make_unique<class place::none>())
	{ }

	/*! Define where the dependency can be found.
	 */
	template <typename Builder>
	dependency&
	place (Builder& place)
	{
		_place = std::make_unique<typename Builder::place>(place);
		return *this;
	}

	/*! Define a provision that the dependency provides.
	 */
	template <typename Provision, typename Action>
	dependency&
	provides (std::string name, Action action)
	{
		static_assert(std::is_same_v<action::out_t<Action>, Provision>,
			"The action does not return the right type of provision");

		provision provided(name, action);
		_provisions.insert({ std::move(name), std::move(provided) });

		return *this;
	}

	provision&
	provided (std::string name)
	{
		return _provisions.at(name);
	}

private:
	/*! The name of the dependency.
	 */
	std::string _name;

	/*! The place where the dependency is.
	 */
	std::unique_ptr<place::base> _place;

	/*! The provisions provided by this dependency.
	 */
	std::unordered_map<std::string, provision> _provisions;
};

}
